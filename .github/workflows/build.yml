name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:  # Allows manual trigger

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Clean build artifacts
      run: |
        python -c "
        import shutil, os
        dirs_to_clean = ['build', 'dist', '__pycache__', 'release']
        for dir_name in dirs_to_clean:
            if os.path.exists(dir_name):
                print(f'Cleaning {dir_name}...')
                shutil.rmtree(dir_name)
        "
        
    - name: Build with PyInstaller (Windows)
      if: runner.os == 'Windows'
      run: |
        pyinstaller --noconfirm --onefile --windowed --name=EyeTracker-Windows --add-data="assets;assets" --add-data="arduino;arduino" main.py
    
    - name: Debug macOS paths and environment
      if: runner.os == 'macOS'
      run: |
        echo "=== Current working directory ==="
        pwd
        echo "=== Directory contents ==="
        ls -la
        echo "=== Spec file exists? ==="
        ls -la build_spec_files/macos/EyeTracker-macOS.spec
        echo "=== Python and PyInstaller versions ==="
        python --version
        pyinstaller --version
        echo "=== Environment variables ==="
        printenv | grep -E "(DYLD|PKG_CONFIG|PATH)" || echo "No relevant env vars"
            
    - name: Build with PyInstaller (macOS)
      if: runner.os == 'macOS'
      env:
        DYLD_LIBRARY_PATH: /opt/homebrew/lib:/usr/local/lib
        PKG_CONFIG_PATH: /opt/homebrew/lib/pkgconfig:/usr/local/lib/pkgconfig
      run: |
        echo "=== Starting PyInstaller build ==="
        echo "Working directory: $(pwd)"
        echo "Spec file path: $(realpath build_spec_files/macos/EyeTracker-macOS.spec)"
        pyinstaller --clean --log-level DEBUG build_spec_files/macos/EyeTracker-macOS.spec
        
    - name: Build with PyInstaller (Linux)
      if: runner.os == 'Linux'
      run: |
        pyinstaller --noconfirm --onefile --windowed --name=EyeTracker-Linux --add-data="assets:assets" --add-data="arduino:arduino" main.py
        
    - name: Create distribution package (Windows)
      if: runner.os == 'Windows'
      run: |
        mkdir release
        copy dist\EyeTracker-Windows.exe release\
        if (Test-Path arduino) { xcopy arduino release\arduino\ /E /I }
        if (Test-Path README.md) { copy README.md release\ }
        if (Test-Path LICENSE) { copy LICENSE release\ }
        Compress-Archive -Path release\* -DestinationPath EyeTracker-Windows.zip
      shell: powershell
      
    - name: Create distribution package (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        mkdir -p release
        
        # Copy app bundle using rsync to preserve structure
        if [ -d "dist/EyeTracker.app" ]; then
          rsync -a --delete dist/EyeTracker.app/ release/EyeTracker.app/
        fi
        
        # Copy additional files
        if [ -d "arduino" ]; then
          cp -r arduino release/
        fi
        if [ -f "README.md" ]; then
          cp README.md release/
        fi
        if [ -f "LICENSE" ]; then
          cp LICENSE release/
        fi
        
        # Create zip file
        cd release && zip -r ../EyeTracker-macOS.zip .
        
    - name: Create distribution package (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        mkdir -p release
        
        # Copy executable
        if [ -f "dist/EyeTracker-Linux" ]; then
          cp dist/EyeTracker-Linux release/
        fi
        
        # Copy additional files
        if [ -d "arduino" ]; then
          cp -r arduino release/
        fi
        if [ -f "README.md" ]; then
          cp README.md release/
        fi
        if [ -f "LICENSE" ]; then
          cp LICENSE release/
        fi
        
        # Create tar.gz file
        cd release && tar -czf ../EyeTracker-Linux.tar.gz .
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: EyeTracker-${{ runner.os }}
        path: |
          EyeTracker-Windows.zip
          EyeTracker-macOS.zip
          EyeTracker-Linux.tar.gz
        if-no-files-found: ignore

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: EyeTracker-*
        merge-multiple: true
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          EyeTracker-Windows.zip
          EyeTracker-macOS.zip
          EyeTracker-Linux.tar.gz
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
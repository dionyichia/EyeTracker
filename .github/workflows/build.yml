name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:  # Allows manual trigger

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    # macOS specific setup
    - name: Install macOS dependencies
      if: runner.os == 'macOS'
      id: macos_version
      run: |
        version=$(sw_vers -productVersion | cut -d '.' -f1,2)
        echo "macos_version=$version" >> $GITHUB_OUTPUT

    - name: Set MACOSX_DEPLOYMENT_TARGET env var
      if: runner.os == 'macOS'
      run: echo "MACOSX_DEPLOYMENT_TARGET=${{ steps.macos_version.outputs.macos_version }}" >> $GITHUB_ENV

    - name: Install macOS dependencies
      if: runner.os == 'macOS'
      run: |
        brew install create-dmg
        
    - name: Upgrade pip and install requirements
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install PyInstaller on Windows
      if: runner.os == 'Windows'
      env:
        PYINSTALLER_COMPILE_BOOTLOADER: 1
      run: |
        pip install git+https://github.com/pyinstaller/pyinstaller.git@develop
      shell: powershell

    - name: Install PyInstaller on macOS/Linux
      if: runner.os != 'Windows'
      run: |
        PYINSTALLER_COMPILE_BOOTLOADER=1 pip install git+https://github.com/pyinstaller/pyinstaller.git@develop

    - name: Clean build artifacts
      run: |
        python -c "
        import shutil, os
        dirs_to_clean = ['build', 'dist', '__pycache__', 'release']
        for dir_name in dirs_to_clean:
            if os.path.exists(dir_name):
                print(f'Cleaning {dir_name}...')
                shutil.rmtree(dir_name)
        "
        
    - name: Build with PyInstaller (Windows)
      if: runner.os == 'Windows'
      run: |
        pyinstaller --noconfirm --onefile --windowed --name=EyeTracker-Windows --add-data="assets;assets" --add-data="arduino;arduino" main.py
    
    - name: Build with PyInstaller (macOS)
      if: runner.os == 'macOS'
      env:
        MACOSX_DEPLOYMENT_TARGET: ${{ steps.macos_version.outputs.macos_version }}
        DYLD_LIBRARY_PATH: /opt/homebrew/lib:/usr/local/lib
        PKG_CONFIG_PATH: /opt/homebrew/lib/pkgconfig:/usr/local/lib/pkgconfig
      run: |
        # Verify project structure
        echo "=== Project structure check ==="
        pwd
        ls -la
        
        # Verify spec file exists
        if [ ! -f "build_spec_files/macos/EyeTracker-macOS.spec" ]; then
          echo "ERROR: Spec file not found"
          find . -name "*.spec" -type f
          exit 1
        fi
        
        # Verify Info.plist exists
        if [ ! -f "build_spec_files/macos/Info.plist" ]; then
          echo "ERROR: Info.plist not found"
          find . -name "Info.plist" -type f
          exit 1
        fi
        
        echo "=== Building with existing spec file ==="
        pyinstaller --clean --log-level INFO build_spec_files/macos/EyeTracker-macOS.spec
        
        echo "=== Verifying build output ==="
        if [ -d "dist/EyeTracker.app" ]; then
          echo "✓ App bundle created successfully"
          ls -la dist/EyeTracker.app/Contents/MacOS/
          
          # Check if executable exists and has proper permissions
          if [ -x "dist/EyeTracker.app/Contents/MacOS/EyeTracker" ]; then
            echo "✓ Executable has proper permissions"
          else
            echo "⚠ Fixing executable permissions"
            chmod +x dist/EyeTracker.app/Contents/MacOS/EyeTracker
          fi
          
          # Check for Info.plist
          if [ -f "dist/EyeTracker.app/Contents/Info.plist" ]; then
            echo "✓ Info.plist included"
            # Verify camera permission is in Info.plist
            if grep -q "NSCameraUsageDescription" dist/EyeTracker.app/Contents/Info.plist; then
              echo "✓ Camera permission found in Info.plist"
            else
              echo "⚠ Camera permission missing from Info.plist"
            fi
          else
            echo "⚠ Info.plist missing"
          fi
          
        else
          echo "x App bundle not created"
          echo "Contents of dist directory:"
          ls -la dist/ || echo "dist directory not found"
          exit 1
        fi
        
    - name: Build with PyInstaller (Linux)
      if: runner.os == 'Linux'
      run: |
        pyinstaller --noconfirm --onefile --windowed --name=EyeTracker-Linux --add-data="assets:assets" --add-data="arduino:arduino" main.py
        
    # Debug step for macOS
    - name: Debug macOS build
      if: runner.os == 'macOS'
      run: |
        echo "=== Checking app structure ==="
        find dist/EyeTracker.app -name "*.dylib" | head -10
        echo "=== Checking Qt plugins ==="
        find dist/EyeTracker.app -path "*/platforms/*" -o -path "*/imageformats/*" | head -5
        echo "=== Checking Python framework ==="
        find dist/EyeTracker.app -name "*Python*" | head -5
        
    - name: Create distribution package (Windows)
      if: runner.os == 'Windows'
      run: |
        mkdir release
        copy dist\EyeTracker-Windows.exe release\
        if (Test-Path arduino) { xcopy arduino release\arduino\ /E /I }
        if (Test-Path README.md) { copy README.md release\ }
        if (Test-Path LICENSE) { copy LICENSE release\ }
        Compress-Archive -Path release\* -DestinationPath EyeTracker-Windows.zip
      shell: powershell
      
    - name: Create distribution package (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        mkdir -p release
        
        # Copy app bundle using rsync to preserve structure and permissions
        if [ -d "dist/EyeTracker.app" ]; then
          rsync -a --delete dist/EyeTracker.app/ release/EyeTracker.app/
          # Ensure executable permissions
          chmod +x release/EyeTracker.app/Contents/MacOS/EyeTracker
        fi
        
        # Copy additional files
        if [ -d "arduino" ]; then
          cp -r arduino release/
        fi
        if [ -f "README.md" ]; then
          cp README.md release/
        fi
        if [ -f "LICENSE" ]; then
          cp LICENSE release/
        fi
        
        # Create a run script for troubleshooting
        cat > release/run_debug.sh << 'EOF'
        #!/bin/bash
        echo "Starting EyeTracker with debug output..."
        cd "$(dirname "$0")"
        export DYLD_PRINT_LIBRARIES=1
        export QT_DEBUG_PLUGINS=1
        ./EyeTracker.app/Contents/MacOS/EyeTracker
        EOF
        chmod +x release/run_debug.sh
        
        # Create zip file
        cd release && zip -r ../EyeTracker-macOS.zip .
        
    - name: Create distribution package (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        mkdir -p release
        
        # Copy executable
        if [ -f "dist/EyeTracker-Linux" ]; then
          cp dist/EyeTracker-Linux release/
          chmod +x release/EyeTracker-Linux
        fi
        
        # Copy additional files
        if [ -d "arduino" ]; then
          cp -r arduino release/
        fi
        if [ -f "README.md" ]; then
          cp README.md release/
        fi
        if [ -f "LICENSE" ]; then
          cp LICENSE release/
        fi
        
        # Create tar.gz file
        cd release && tar -czf ../EyeTracker-Linux.tar.gz .
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: EyeTracker-${{ runner.os }}
        path: |
          EyeTracker-Windows.zip
          EyeTracker-macOS.zip
          EyeTracker-Linux.tar.gz
        if-no-files-found: ignore

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: EyeTracker-*
        merge-multiple: true
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          EyeTracker-Windows.zip
          EyeTracker-macOS.zip
          EyeTracker-Linux.tar.gz
        generate_release_notes: true
        body: |
          ## Installation Instructions

          ### macOS
          1. Download EyeTracker-macOS.zip
          2. Extract and move EyeTracker.app to Applications folder
          3. Right-click the app and select "Open" the first time
          4. If it crashes, run `./run_debug.sh` from Terminal for debug info
          
          ### Windows
          1. Download EyeTracker-Windows.zip
          2. Extract and run EyeTracker-Windows.exe
          
          ### Linux
          1. Download EyeTracker-Linux.tar.gz
          2. Extract and run `./EyeTracker-Linux`
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}